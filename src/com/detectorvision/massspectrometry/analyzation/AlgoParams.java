/* $Id: AlgoParams.java 392 2010-09-13 17:14:59Z frank $ */

package com.detectorvision.massspectrometry.analyzation;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;


//import com.detectorvision.deltaMasses.DeltaMasses;
//import com.swtworkbench.community.xswt.metalogger.Logger;
import org.apache.log4j.Logger;

/**
 * Class holding all informtion needed for the BaseAlgorithm to operate
 * 
 * @author frank@detectorvision.com
 * v1.0 20070228
 */

public class AlgoParams {
	public boolean DMBautoStore;
	public boolean DMBoverWrite;
	public boolean neutralLossDetection;
	public boolean isDiscoveryEdition;
	public boolean polymerFiltering;
	public boolean superFastDetection;
	public double  superFastDeltaMass;
	static public double  msmsAccuracy;
	static public double  msmsAccuracyScoring;
	public double  msAccuracy;
	public boolean setProgress;
	public boolean noLowMassBoundary;
	public boolean identifiedPairsOnly;
	public int maxPairs;
	public boolean superFastDetectionLazy;
	static Logger logger = Logger.getLogger(AlgoParams.class.getName());


	public AlgoParams(){
		org.apache.log4j.BasicConfigurator.configure();
		getDefault();
	}	
	
	static public void setScoring(){
		if(msmsAccuracy >= 0.4){msmsAccuracyScoring=msmsAccuracy;}
		else{
			msmsAccuracyScoring=0.4-(0.25*(0.4-msmsAccuracy));
		}
	};
	
	
	public void storeDefault(){
		logger.info("AlgoParams:storeDefault");
		Properties default_parameters = new Properties();
		default_parameters.setProperty("DMBautoStore", ""+DMBautoStore);
		default_parameters.setProperty("DMBoverWrite", ""+DMBoverWrite);
		default_parameters.setProperty("neutralLossDetection", ""+neutralLossDetection);
		default_parameters.setProperty("polymerFiltering", ""+polymerFiltering);
		default_parameters.setProperty("superFastDetection", ""+superFastDetection);
		default_parameters.setProperty("superFastDeltaMass", ""+superFastDeltaMass);
		default_parameters.setProperty("msmsAccuracy", ""+msmsAccuracy);
		default_parameters.setProperty("msAccuracy", ""+msAccuracy);
		default_parameters.setProperty("setProgress", ""+setProgress);
		default_parameters.setProperty("noLowMassBoundary",""+noLowMassBoundary);
		default_parameters.setProperty("identifiedPairsOnly",""+identifiedPairsOnly);
		try {
			FileOutputStream out = new FileOutputStream("default_parameter_settings");
			logger.info("storing parameters to:"+out.getChannel().toString());
			default_parameters.store(out, "Please dont change this file manually\nGenerated by default parameter system");
			out.close();
			logger.info("AlgoParams:storeDefault OK");
		} catch (FileNotFoundException e) {
			logger.error("storeDefault:File not found:"+e.toString());
		    e.printStackTrace();
		} catch (IOException e) {
			logger.error("storeDefault:IOException:"+e.toString());
			e.printStackTrace();
		}
	}
	
	public void getDefault(){
		logger.info("AlgoParams:getDefault");
		Properties default_parameters = new Properties();
		try {
			FileInputStream in = new FileInputStream("default_parameter_settings");
			logger.info("reading parameters from:"+in.toString());
			default_parameters.load(in);
			in.close();
			try{
			DMBautoStore=Boolean.parseBoolean(default_parameters.getProperty("DMBautoStore"));
			DMBoverWrite=Boolean.parseBoolean(default_parameters.getProperty("DMBoverWrite"));
			neutralLossDetection=Boolean.parseBoolean(default_parameters.getProperty("neutralLossDetection"));
			polymerFiltering=Boolean.parseBoolean(default_parameters.getProperty("polymerFiltering"));
			superFastDetection=Boolean.parseBoolean(default_parameters.getProperty("superFastDetection"));
			superFastDeltaMass=Double.parseDouble(default_parameters.getProperty("superFastDeltaMass"));
			msAccuracy=Double.parseDouble(default_parameters.getProperty("msAccuracy"));
			msmsAccuracy=Double.parseDouble(default_parameters.getProperty("msmsAccuracy"));
			setProgress=Boolean.parseBoolean(default_parameters.getProperty("setProgress"));
			noLowMassBoundary=Boolean.parseBoolean(default_parameters.getProperty("noLowMassBoundary"));
			identifiedPairsOnly=Boolean.parseBoolean(default_parameters.getProperty("identifiedPairsOnly"));
			maxPairs=250000;
			//printParams();//comment me
			logger.info("getDefault: read default parameters.");
			}
			catch(Exception ex){
				logger.error("getDefault Exception:"+ex.toString());
				setDefault();
			}	
		} catch (FileNotFoundException e) {
		    logger.error("getDefault:File not found:"+e.toString());
			setDefault();
		} catch (IOException e) {
			logger.error("getDefault: IOException:"+e.toString());
			setDefault();
		}
	}
	
	public void setDefault(){
		this.DMBautoStore=false;
		this.DMBoverWrite=false;
		this.neutralLossDetection=false;
		this.polymerFiltering=true;
		this.superFastDetection=false;
		this.superFastDeltaMass=79.966331;
		this.msAccuracy=0.01;
		this.msmsAccuracy=0.4;
		this.setProgress=true;//False only in automation mode
		this.maxPairs=250000;
		this.noLowMassBoundary=false;
		this.identifiedPairsOnly=false;
		logger.info("setDefault:set default parameters");
	}
	
	public String printParams() {
		logger.info("DMBautoStore:"+this.DMBautoStore);
		logger.info("this.DMBoverWrite:"+this.DMBoverWrite);
		logger.info("this.neutralLossDetection:"+this.neutralLossDetection);
		logger.info("this.polymerFiltering:"+this.polymerFiltering);
		logger.info("this.isDiscoveryEdition:"+this.isDiscoveryEdition);
		logger.info("this.superFastDetection:"+this.superFastDetection);
		logger.info("this.superFastDeltaMass:"+this.superFastDeltaMass);		
		logger.info("this.superFastDetectionLazy:"+this.superFastDetectionLazy);
		logger.info("this.msmsAccuracy:"+this.msmsAccuracy);
		this.setScoring();
		logger.info("this.msmsAccuracyScoring:"+this.msmsAccuracyScoring);
		logger.info("this.msAccuracy:"+this.msAccuracy);
		logger.info("this.setProgress:"+this.setProgress);
		logger.info("this.maxPairs:"+this.maxPairs);
		logger.info("this.setProgress:"+this.setProgress);
		logger.info("this.noLowMassBoundary:"+this.noLowMassBoundary);
		logger.info("this.identifiedPairsOnly:"+this.identifiedPairsOnly);
		return("done"); }
}
